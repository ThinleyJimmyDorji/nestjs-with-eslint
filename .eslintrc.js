module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    sourceType: 'module',
  },
  plugins: ['@typescript-eslint/eslint-plugin'],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    // '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'warn',
    '@typescript-eslint/no-unsafe-call': 'off',
    '@typescript-eslint/no-unsafe-return': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-inferrable-types': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/restrict-template-expressions': 'off',
    '@typescript-eslint/quotes': ['error', 'single'],
    '@typescript-eslint/explicit-function-return-type': ['error', {
      allowExpressions: true, // Allow return type to be inferred for arrow functions and function expressions
    }],
    '@typescript-eslint/typedef': [
      'error',
      {
        'variableDeclaration': false,
        'memberVariableDeclaration': false,
        'propertyDeclaration': false,
      },
    ],
    'no-debugger': 'error',
    'eqeqeq': 'error',
    'max-lines-per-function': ['warn', 20],
    'max-depth': ['warn', 2],
    'no-empty': 'error',
    'array-callback-return': 'warn',
    'for-direction': 'error',
    'getter-return': 'error',
    'no-await-in-loop': 'warn',
    'no-class-assign': 'error',
    'no-compare-neg-zero': 'error',
    'no-cond-assign': 'error',
    'no-const-assign': 'error',
    'no-constant-condition': 'warn',
    'no-constructor-return': 'error',
    'no-control-regex': 'warn',
    'no-dupe-args': 'error',
    'no-dupe-class-members': 'error',
    'no-dupe-else-if': 'warn',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': 'error',
    'no-empty-character-class': 'warn',
    'no-empty-pattern': 'warn',
    'no-ex-assign': 'error',
    'no-fallthrough': 'error',
    'no-unused-private-class-members': 'warn',
    'no-unsafe-optional-chaining': 'warn',
    'quotes': [
      'error',
      'single',
      {
        'allowTemplateLiterals': true,
      },
    ],
    'valid-typeof': 'error',
    'block-scoped-var': 'error',
    'comma-spacing': [
      'error',
      {
        'before': false,
        'after': true,
      },
    ],
  },
};
